/*
	Copyright 2014 Francesco "Franc[e]sco" Noferi (francesco149@gmail.com)

	This file is part of wxPloiter.

	wxPloiter is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	wxPloiter is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with wxPloiter. If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include "common.h"
#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_int_distribution.hpp>
#include <boost/foreach.hpp>
#include <boost/thread/mutex.hpp>
#include <boost/shared_ptr.hpp>
#include <wx/dataobj.h>

#include <Windows.h>
#include <wx/msw/winundef.h>
#pragma comment(lib, "detours.lib")

// macros
#define strfmt() std::ostringstream().flush()
#define boost_foreach BOOST_FOREACH

#if defined(DEBUG) | defined(_DEBUG)
#ifndef dbgcode
#define dbgcode(...) do { __VA_ARGS__; } while (0)
#endif
#else
#ifndef dbgcode
#define dbgcode(x)
#endif
#endif

// maplestory utility funcs
namespace maple
{
	HWND getwnd(); // returns a handle to the MapleStory in-game window
}

namespace utils
{
	bool copytoclipboard(wxTextDataObject *source);

	// detours 2.1 utilities
	// TODO: move this to utils::mem maybe?
	namespace detours
	{
		bool hook(bool enabled, __inout PVOID *ppvTarget, __in PVOID pvDetour);
	}

	// various datetime utilities
	namespace datetime
	{
		std::string utc_date(); // formats the current utc date in a string
		std::string utc_time(); // formats the current utc time in a string
	}

	// multi-purpose random number generator
	class random
	{
	public:
		static void init();
		static boost::shared_ptr<random> get();
		virtual ~random();

		// generic integer random number generator
		// T: the desired integer type
		// the generated number will be >= min and <= max
		// NOTE: this is for integer types ONLY!
		template <typename T>
		T getinteger(T min, T max)
		{
			boost::mutex::scoped_lock lock(mut);
			boost::random::uniform_int_distribution<> dist(min, max); // randomness distribution rule
			return static_cast<T>(dist(gen)); // generate a number between min and max
		}

		// generates a number between 0x00U and 0xFFU
		byte getbyte();

		// fills a byte array with randomly generated bytes
		// bytes: the destination byte array 
		// cb: the size of the destination array
		void getbytes(byte *bytes, size_t cb);

		// generates a number netween 0x0000U and 0xFFFFU
		word random::getword();

		// generates a number netween 0x00000000U and 0xFFFFFFFFU
		dword random::getdword();

	protected:
		static boost::shared_ptr<random> instance;
		boost::mutex mut;
		boost::random::mt19937 gen; // seed
		random(); // private singleton constructor
	};

	// various asm / low-level operators transposed to cpp
	namespace asmop
	{
		// circular shift (rotate) right
		// num is the number of bits to shift
		// ror(0b101100, 1) = 0b010110
		byte ror(byte val, int num);

		// circular shift (rotate) left
		// num is the number of bits to shift
		// rol(0b010110, 1) = 0b101100
		byte rol(byte val, int num);
	}
}
